{"remainingRequest":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!/Users/conghua/Study/Projects/Vue_CloudMusic/src/components/findMusic/diyRecommend/MusicListTable.vue?vue&type=style&index=0&id=1fd634af&lang=less&scoped=true&","dependencies":[{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/src/components/findMusic/diyRecommend/MusicListTable.vue","mtime":1613060486000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_css-loader@3.6.0@css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_less-loader@6.2.0@less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKL2RlZXAvIC5lbC10YWJsZV8xX2NvbHVtbl80IC5jZWxsIHsKICAgIGN1cnNvcjogcG9pbnRlciAhaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["MusicListTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA","file":"MusicListTable.vue","sourceRoot":"src/components/findMusic/diyRecommend","sourcesContent":["<template>\n    <!--歌曲列表-->\n    <el-table :data=\"currentMusicListInfo\" ref=\"playTable\" highlight-current-row border stripe\n              style=\"cursor: context-menu;\" @row-dblclick=\"playMusicList\">\n\n        <el-table-column label=\"#\" type=\"index\">\n            <template scope=\"scope\">\n                <img v-if=\"curId === scope.row.id\" src=\"imgs/isPlay.png\" alt=\"\">\n                <p v-else>{{scope.$index+1}}</p>\n            </template>\n        </el-table-column>\n\n\n        <el-table-column v-if=\"false\" label=\"id\" prop=\"id\"></el-table-column>\n\n        <el-table-column label=\"音乐标题\" prop=\"name\"></el-table-column>\n\n        <el-table-column label=\"歌手\" prop=\"ar[0].name\" width=\"80px;\">\n            <template scope=\"scope\">\n                <span v-for=\"(item,index) in scope.row.ar\" style=\"cursor: pointer\" @click=\"toSingerPage(item.id)\">\n                    {{\n                    index === 0 && scope.row.ar.length > 1 && index !== scope.row.ar.length-1\n                    ? item.name +'/' : item.name\n                    }}\n                </span>\n            </template>\n        </el-table-column>\n\n        <el-table-column label=\"专辑名\" prop=\"al.name\"></el-table-column>\n\n        <el-table-column label=\"时长\" prop=\"dt\" width=\"80px;\"></el-table-column>\n\n    </el-table>\n</template>\n\n<script>\n\n    export default {\n        data() {\n            return {\n                //接受传递来的参数\n                queryIds: this.$route.params.ids ? this.$route.params.ids : window.localStorage.getItem('queryIds'),\n                //查询当前歌单所有音乐的name url 作者等等\n                currentMusicListInfo: [],\n                //歌单的歌曲id合集\n                songListInfo: [],\n                //父组件当前播放的音乐的id\n                curId: parseInt(window.localStorage.getItem('curPlayMusicId')),\n            }\n        },\n        created() {\n            //获取列表信息数据\n            this.handlerSongList()\n            //注册监听的事件 在main.js中定义了\n            window.addEventListener('setItem', () => {\n                this.curId = parseInt(localStorage.getItem('curPlayMusicId'))\n            })\n        },\n        mounted() {\n            //放入上一个组件传递来的参数\n            window.localStorage.setItem('queryIds', this.queryIds)\n        },\n        methods: {\n            //处理歌单所有歌曲信息的查询(根据id)\n            handlerSongList() {\n                this.$http.get('song/detail', {params: {ids: this.queryIds}}).then(res => {\n                    this.currentMusicListInfo = res.data.songs\n                    //处理时长数据\n                    this.currentMusicListInfo.forEach(item => {\n                        const dt = new Date(item.dt)\n                        const mm = (dt.getMinutes() + '').padStart(2, '0')\n                        const ss = (dt.getSeconds() + '').padStart(2, '0')\n\n                        item.dt = mm + ':' + ss\n                    })\n                    //设置歌单所有歌曲的id信息\n                    this.setSongListInfo()\n                })\n            },\n            //双击歌曲添加数据进去,并循环播放(向父组件传递参数)\n            playMusicList(row) {\n                this.$emit('setSongListInfo', this.songListInfo, row.id)\n            },\n            //设置歌单所有歌曲的id\n            setSongListInfo() {\n                this.currentMusicListInfo.forEach(item => {\n                    this.songListInfo.push(item.id)\n                })\n            },\n            //点击歌手名跳转歌手详细页面\n            toSingerPage(id) {\n                this.$router.push('/singer/' + id)\n            }\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n\n    /deep/ .el-table_1_column_4 .cell {\n        cursor: pointer !important;\n    }\n</style>\n"]}]}