{"remainingRequest":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!/Users/conghua/Study/Projects/Vue_CloudMusic/src/components/findMusic/diyRecommend/SongList.vue?vue&type=style&index=0&id=0607e052&lang=less&scoped=true&","dependencies":[{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/src/components/findMusic/diyRecommend/SongList.vue","mtime":1613060486000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_css-loader@3.6.0@css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_less-loader@6.2.0@less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/conghua/Study/Projects/Vue_CloudMusic/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5lbC1idXR0b24gewogICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgY29sb3I6IHdoaXRlOwp9CgouZWwtbWVudS5lbC1tZW51LS1ob3Jpem9udGFsIHsKICAgIGJvcmRlci1ib3R0b206IDBweDsKfQoKLmVsLW1lbnUtaXRlbS5pcy1hY3RpdmUgewogICAgY29sb3I6IGJsYWNrOwogICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJlZCAhaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["SongList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"SongList.vue","sourceRoot":"src/components/findMusic/diyRecommend","sourcesContent":["<template>\n    <el-container style=\"margin-bottom: 55px;\">\n\n        <el-header height=\"220px;\">\n            <el-row>\n                <!--歌单图标-->\n                <img :src=\"currentSongList.coverImgUrl\" style=\"width: 220px;height: 220px;\"/>\n\n                <!--右侧歌曲信息-->\n                <div style=\"float:right;color: gray\">\n                    <div style=\"opacity: 0.6\">\n                        <p>歌曲数 | 播放量</p>\n                        <p style=\"float:right;margin: 0\">{{currentSongList.trackCount}} |\n                            {{(currentSongList.playCount/10000).toFixed(0)}}万</p>\n                    </div>\n                </div>\n\n                <!--标签及名字-->\n                <el-tag type=\"danger\" style=\"background-color: white;position: absolute;top: 0;left: 240px;\">精品歌单\n                </el-tag>\n                <h2 style=\"position: absolute;top: -20px;left: 320px;font-weight: 400\">{{currentSongList.name}}</h2>\n\n                <!--作者信息-->\n                <img :src=\"currentSongList.creator.avatarUrl\"\n                     style=\"width: 35px;height: 35px;border-radius:15px;position: absolute;top: 50px;left: 15%;\">\n                <span style=\"position:absolute;top: 57px;left: 18%;\">{{currentSongList.creator.nickname}}</span>\n                <span style=\"position:absolute;top: 57px;left: 27%;opacity: 0.7;\">{{currentSongList.createTime | dateFormat}}创建</span>\n\n\n                <!--按钮组-->\n                <el-button type=\"danger\" size=\"mini\" icon=\"el-icon-video-play\"\n                           style=\"position:absolute;top: 100px;left: 240px;\"\n                           @click=\"setSongListInfo(playList,playList[0])\">\n                    播放全部\n                </el-button>\n\n                <el-button icon=\"el-icon-folder-add\" size=\"mini\" @click=\"subscripe(currentSongList.id)\"\n                           style=\"position: absolute;top: 100px;left: 340px;color: black\">\n                    收藏({{currentSongList.subscribedCount}})\n                </el-button>\n\n                <el-button icon=\"el-icon-share\" size=\"mini\"\n                           style=\"position: absolute;top: 100px;left: 480px;color: black\">\n                    分享({{currentSongList.shareCount}})\n                </el-button>\n\n                <!--标签信息-->\n                <span style=\"position: absolute;top: 150px;left: 240px;\">\n                    标签: <span style=\"color: rgb(12,115,194);cursor: pointer\"\n                              v-for=\"(item,index) in currentSongList.tags\">{{index+1 === currentSongList.tags.length ? item : item+' / '}}</span>\n                </span>\n\n                <!--简介信息-->\n                <el-collapse style=\"position: absolute;top: 180px;left: 240px;border: none;z-index: 999\">\n                    <el-collapse-item :title=\"'简介: ' + (currentSongList.description + '').substr(0,26) + '...' \">\n                        <p>{{currentSongList.description}}</p>\n                    </el-collapse-item>\n                </el-collapse>\n            </el-row>\n\n        </el-header>\n\n        <el-main>\n\n            <el-menu default-active=\"1\" class=\"el-menu-demo\" mode=\"horizontal\" style=\"width: 280px;\">\n                <el-menu-item index=\"1\" @click=\"toMusicListPage\">歌曲列表</el-menu-item>\n                <el-menu-item index=\"2\" @click=\"toCommentPage\">评论({{currentSongList.commentCount}})</el-menu-item>\n            </el-menu>\n\n            <router-view ref=\"child\" @setSongListInfo=\"setSongListInfo\"></router-view>\n        </el-main>\n\n    </el-container>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                //前一个组件传递过来的值 放入localStorage保存\n                currentId: this.$route.params.id ? this.$route.params.id : window.localStorage.getItem('currentId'),\n                //当前歌单信息\n                currentSongList: {\n                    //创建人信息\n                    creator: {\n                        avatarUrl: '',\n                        nickname: '',\n                    },\n                    trackIds: []\n                },\n                //传递给下一个组件的所有歌曲id查询信息\n                queryIds: '',\n                //当前歌单所有歌曲id信息\n                playList: window.localStorage.getItem('playList') === null ? [] : window.localStorage.getItem('playList').split(',')\n            }\n        },\n        created() {\n            this.getSongListInfo();\n            //注册监听的事件 在main.js中定义了\n            window.addEventListener('setItem', () => {\n                //这里是为了从主页进入的歌单 页面不进行变化 所以加一个localstorage监听器 监听当前歌单变化\n                //如果有变化直接就重新查询数据 替换掉之前的数据  实现刷新页面\n                this.currentId = parseInt(localStorage.getItem('currentId'))\n               \n                //重新加载数据(暂有BUG未修)\n                this.getSongListInfo()\n\n            })\n        },\n        mounted() {\n            //把上一个页面传递来的参数放入localstorage 防止页面刷新 参数没了\n            window.localStorage.setItem('currentId', this.currentId);\n        },\n        methods: {\n            //获取歌单信息并处理歌单所有歌曲数据\n            getSongListInfo() {\n                this.$http.get('playlist/detail', {params: {id: this.currentId}}).then(res => {\n                    this.currentSongList = res.data.playlist\n                    //等待数据赋值后,马上自执行一次路由跳转加载子组件\n                    const href = window.location.href;\n                    if (href.substring(href.lastIndexOf('/'), href.length) !== '/musicPage') {//如果为自跳转则执行\n                        this.toMusicListPage()\n                    }\n                })\n            },\n            //路由跳转并携带歌单ids数组参数\n            toMusicListPage() {\n                var queryIds = ''\n                this.currentSongList.trackIds.forEach(item => {\n                    queryIds += item.id + ','\n                })\n                this.$router.push({\n                    name: 'musicPage',\n                    params: {\n                        ids: queryIds.substr(0, queryIds.length - 1)\n                    }\n                })\n            },\n            //路由跳转携带参数\n            toCommentPage() {\n                this.$router.push('/comment/' + this.currentId);\n            },\n            //子组件传递来的歌单所有歌曲id信息,和当前播放的音乐的id\n            setSongListInfo(songList, curId) {\n                this.playList = songList\n                this.$emit('setSongListInfo', songList, curId);\n            },\n            //收藏歌单\n            subscripe(id) {\n                this.$http.get('playlist/subscribe', {params: {id: id, t: 1}}).then(res => {\n                    console.log(res)\n                    if (res.data.code === 200) {\n                        return this.$message.success('收藏成功,数据同步需要时间!')\n                    } else {\n                        return this.$message.info('收藏失败!')\n                    }\n                })\n            }\n        },\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    .el-button {\n        border-radius: 5px;\n        color: white;\n    }\n\n    .el-menu.el-menu--horizontal {\n        border-bottom: 0px;\n    }\n\n    .el-menu-item.is-active {\n        color: black;\n        border-bottom: 2px solid red !important;\n    }\n</style>\n"]}]}